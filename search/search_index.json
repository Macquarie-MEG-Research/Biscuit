{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Biscuit Description Biscuit is a simple graphical application that facilitates the reformatting of raw KIT and Elekta MEG data to comply with the international BIDS specification Biscuit utilises the power of MNE and MNE-BIDS to perform the conversion. Biscuit supported by Macquarie University","title":"Home"},{"location":"#biscuit","text":"","title":"Biscuit"},{"location":"#description","text":"Biscuit is a simple graphical application that facilitates the reformatting of raw KIT and Elekta MEG data to comply with the international BIDS specification Biscuit utilises the power of MNE and MNE-BIDS to perform the conversion. Biscuit supported by Macquarie University","title":"Description"},{"location":"guide_elekta/","text":"Converting Elekta data Title Exporting the data Once all required fields have been completed, and all con files have an mrk file associated with them, the Initialise Data button will be able to be pressed in the Folder Info tab. Once this is pressed and is complete, the Generate BIDS button will become active. Pressing this button will begin the processing of data to the BIDS format. This can take about 5 seconds per con file being processed, so allow it some time. A progress popup will appear which indicates the current process and indicates when the processing is complete. Once your data has been processed it will be placed in a folder named BIDS that will be in the main parent directory.","title":"Elekta data"},{"location":"guide_elekta/#converting-elekta-data","text":"","title":"Converting Elekta data"},{"location":"guide_elekta/#title","text":"","title":"Title"},{"location":"guide_elekta/#exporting-the-data","text":"Once all required fields have been completed, and all con files have an mrk file associated with them, the Initialise Data button will be able to be pressed in the Folder Info tab. Once this is pressed and is complete, the Generate BIDS button will become active. Pressing this button will begin the processing of data to the BIDS format. This can take about 5 seconds per con file being processed, so allow it some time. A progress popup will appear which indicates the current process and indicates when the processing is complete. Once your data has been processed it will be placed in a folder named BIDS that will be in the main parent directory.","title":"Exporting the data"},{"location":"guide_general/","text":"General Usage Biscuit can be run by running the GUI.py file with Python. Upon running the script you will be greeting with two pop-ups. The first pop-up will ask you to select the location of your MEG data. You need to select the parent folder that contains all of your MEG data, instead of a single folder which contains data from one session. Main window Selecting a folder as shown will bring up the Folder Info tab where you can enter important info about the recording session. In general, if a field is red, it is required for conversion to BIDS format, and the process won't be allowed until a session has no red fields remaining. Settings windows To make the BIDS conversion process as quick and easy as possible, Biscuit is able to store the settings for any projects you have to reduce the amount of information needed to be entered. Each project has it's own settings, so any file that is given the specified project number will automatically have these settings applied to it. Project settings list To add new settings or edit existing settings select Options > Set Defaults from the menu. The first time you run Biscuit you will be greeted with an empty list of project settings. This view displays some condensed information about the project so that you can see quickly what the important current settings are. To add settings for a new project select the Add Row button. Add new project settings The new project settings popup allows for a fair bit of information to be entered. It is worth spending some time to enter in any project information here as the information is applied to all relevant data. Entry field descriptions Project Title : A short title for your project. This will be placed in the readme generated. Project ID : This is the ID of your project. Generally this will be an alphanumeric identifier that all experiments within a test will share. It is this value that tells Biscuit what experimental data should be using the project settings. Start/End Date : Starting and finishing dates of the project. These are not required but are good to provide for record keeping. If the end date is unknown it can be left blank. Project Description : A free-form field where you can enter any information about the project. As much information about the project should be included here as possible as this is the only place where you can put whatever you want. Trigger Channels : This is a list where you can add as many trigger channels as you require. For each row you enter the channel number and the description of the event on this channel. This information will automatically be displayed in the channels tab where extra channels can be added if particular runs use more or less trigger channels than the default settings. Participant Groups : A list of all the participant groups within the project. The default values for any project are Participant and Control . If you wish to have groups different to these values you can simply add as many groups as you require and these will appear in the Subject info entry area for the experimental data. Once you have entered some information your project settings will look something like To save the settings simply press Save and the new settings will appear in the list of project settings General navigation Biscuit is split in two halves. The left side consists of a file treeview which is used to navigate the directories containing all the various files. Selecting any file will bring up information if there is info available. Most files that are not used for MEG will simply have the message that the data type is not supported. Some human-readble text files will be displayed however. This includes MATLAB .m files, Python .py scripts and .txt files. Both .py and .m files also support syntax highlighting (requires the pygments python library) The right side displays all the file information for the selected file. This view is a tabbed which .con and .fif files utilise to gain a Channels and Events tab respectively.","title":"General use"},{"location":"guide_general/#general-usage","text":"Biscuit can be run by running the GUI.py file with Python. Upon running the script you will be greeting with two pop-ups. The first pop-up will ask you to select the location of your MEG data. You need to select the parent folder that contains all of your MEG data, instead of a single folder which contains data from one session.","title":"General Usage"},{"location":"guide_general/#main-window","text":"Selecting a folder as shown will bring up the Folder Info tab where you can enter important info about the recording session. In general, if a field is red, it is required for conversion to BIDS format, and the process won't be allowed until a session has no red fields remaining.","title":"Main window"},{"location":"guide_general/#settings-windows","text":"To make the BIDS conversion process as quick and easy as possible, Biscuit is able to store the settings for any projects you have to reduce the amount of information needed to be entered. Each project has it's own settings, so any file that is given the specified project number will automatically have these settings applied to it.","title":"Settings windows"},{"location":"guide_general/#project-settings-list","text":"To add new settings or edit existing settings select Options > Set Defaults from the menu. The first time you run Biscuit you will be greeted with an empty list of project settings. This view displays some condensed information about the project so that you can see quickly what the important current settings are. To add settings for a new project select the Add Row button.","title":"Project settings list"},{"location":"guide_general/#add-new-project-settings","text":"The new project settings popup allows for a fair bit of information to be entered. It is worth spending some time to enter in any project information here as the information is applied to all relevant data.","title":"Add new project settings"},{"location":"guide_general/#entry-field-descriptions","text":"Project Title : A short title for your project. This will be placed in the readme generated. Project ID : This is the ID of your project. Generally this will be an alphanumeric identifier that all experiments within a test will share. It is this value that tells Biscuit what experimental data should be using the project settings. Start/End Date : Starting and finishing dates of the project. These are not required but are good to provide for record keeping. If the end date is unknown it can be left blank. Project Description : A free-form field where you can enter any information about the project. As much information about the project should be included here as possible as this is the only place where you can put whatever you want. Trigger Channels : This is a list where you can add as many trigger channels as you require. For each row you enter the channel number and the description of the event on this channel. This information will automatically be displayed in the channels tab where extra channels can be added if particular runs use more or less trigger channels than the default settings. Participant Groups : A list of all the participant groups within the project. The default values for any project are Participant and Control . If you wish to have groups different to these values you can simply add as many groups as you require and these will appear in the Subject info entry area for the experimental data. Once you have entered some information your project settings will look something like To save the settings simply press Save and the new settings will appear in the list of project settings","title":"Entry field descriptions"},{"location":"guide_general/#general-navigation","text":"Biscuit is split in two halves. The left side consists of a file treeview which is used to navigate the directories containing all the various files. Selecting any file will bring up information if there is info available. Most files that are not used for MEG will simply have the message that the data type is not supported. Some human-readble text files will be displayed however. This includes MATLAB .m files, Python .py scripts and .txt files. Both .py and .m files also support syntax highlighting (requires the pygments python library) The right side displays all the file information for the selected file. This view is a tabbed which .con and .fif files utilise to gain a Channels and Events tab respectively.","title":"General navigation"},{"location":"guide_kit/","text":"Converting KIT data To convert KIT we need to do a few steps. Because KIT data consists of multiple files unlike Elekta data which consists of a single .fif file, the main object is the parent folder containing the .con , .mrk , .elp , and .hsp files. KIT data folder When you first click on a folder containing all the required files the info panel will be populated with a number of info boxes and entires: If you however select a folder which doesn't contain all the required files, the information panel will inform you of this Once you have entered all the required information into the text boxes, the Generate BIDS button will become click-able: For this to occur you must have also entered all the required information for any .con files within the folder as BIDS conversion can only proceed once all required files have the necessary information. .CON file window The .con file is the primary building block of KIT data and as such eash one requires a reasonable amount of information for BIDS conversion to happen. Experimental information Required Information Task : A shorthand identifier for the task performed. Acquisition : Synonymous with run . An identifier for the run or block number (often just 1 , 2 etc.). Associated .mrk's : A list of any .mrk files that are associated with this .con file. Details on how to do this here Optional Information Is junk : This indicates that the .con file isn't needed as part of the data set. The file will not be copied to the BIDS folder. Is empty room : If this is selected the file is specified as the empty room data. Empty room data is copied to a different location and named based on the date of the recording. You should only select one empty room recoring per day otherwise any other existing empty room recording will be overwritten by the new one. Has empty room : If this is selected the BIDS data will contain a path pointing to the location of empty room file from the same recording day. Note that there is not check on whether or not this empty room file actually exists as this data can be produced after the BIDS conversion occurs for this file. If you do not have any empty room data that was taken on the same day as this con file, do not check this box as the data will not be correct. Channel Information It is often important to specify if a certain channel is bad, or if a channel has any trigger information on it so that MNE can process this information properly and MNE-BIDS can produce the correct event information on export. If you have set up any default channels when setting up your project defaults , then you will automatically see any channels specified as trigger channels in the channel tab, along with their default trigger description. You can however add any other channel detected in the .con file to add to the list if you need to add extra trigger channels for the particular recording. Associating a .mrk file It is crucial for each .con file to know what .mrk file was used during the recording. We can associate a .con file with an .mrk file in one of 3 different ways, all achieved by right-clicking on the .mrk or .con file in question. Right-click on a .con file and select associate . This will prompt you to select an .mrk file to associate with the .con file. You can do this by right-clicking the .mrk file you wish to associate and then selecting associate . Right-click on an .mrk file and select associate . Same as above but you select the .con file the .mrk is to be associated with. Right-click on an .mrk file and select associate with all . This will associate the selected .mrk file with every .con file in the same directory. Once an .mrk has been associated with a .con file, selecting a .con file will highlight any associated .mrk files in blue in the file treeview on the left hand side. You can use this to confirm that you have associated the correct .mrk file with the correct .con file. Exporting the data When all the required information has been entered, the Generate BIDS button will become active. To export you simply press this button once and a popup will appear which gives the current progress of the export process. Once the conversion is done the popup will close and the data will available in the BIDS folder that will be in the file view.","title":"KIT data"},{"location":"guide_kit/#converting-kit-data","text":"To convert KIT we need to do a few steps. Because KIT data consists of multiple files unlike Elekta data which consists of a single .fif file, the main object is the parent folder containing the .con , .mrk , .elp , and .hsp files.","title":"Converting KIT data"},{"location":"guide_kit/#kit-data-folder","text":"When you first click on a folder containing all the required files the info panel will be populated with a number of info boxes and entires: If you however select a folder which doesn't contain all the required files, the information panel will inform you of this Once you have entered all the required information into the text boxes, the Generate BIDS button will become click-able: For this to occur you must have also entered all the required information for any .con files within the folder as BIDS conversion can only proceed once all required files have the necessary information.","title":"KIT data folder"},{"location":"guide_kit/#con-file-window","text":"The .con file is the primary building block of KIT data and as such eash one requires a reasonable amount of information for BIDS conversion to happen.","title":".CON file window"},{"location":"guide_kit/#experimental-information","text":"","title":"Experimental information"},{"location":"guide_kit/#required-information","text":"Task : A shorthand identifier for the task performed. Acquisition : Synonymous with run . An identifier for the run or block number (often just 1 , 2 etc.). Associated .mrk's : A list of any .mrk files that are associated with this .con file. Details on how to do this here","title":"Required Information"},{"location":"guide_kit/#optional-information","text":"Is junk : This indicates that the .con file isn't needed as part of the data set. The file will not be copied to the BIDS folder. Is empty room : If this is selected the file is specified as the empty room data. Empty room data is copied to a different location and named based on the date of the recording. You should only select one empty room recoring per day otherwise any other existing empty room recording will be overwritten by the new one. Has empty room : If this is selected the BIDS data will contain a path pointing to the location of empty room file from the same recording day. Note that there is not check on whether or not this empty room file actually exists as this data can be produced after the BIDS conversion occurs for this file. If you do not have any empty room data that was taken on the same day as this con file, do not check this box as the data will not be correct.","title":"Optional Information"},{"location":"guide_kit/#channel-information","text":"It is often important to specify if a certain channel is bad, or if a channel has any trigger information on it so that MNE can process this information properly and MNE-BIDS can produce the correct event information on export. If you have set up any default channels when setting up your project defaults , then you will automatically see any channels specified as trigger channels in the channel tab, along with their default trigger description. You can however add any other channel detected in the .con file to add to the list if you need to add extra trigger channels for the particular recording.","title":"Channel Information"},{"location":"guide_kit/#associating-a-mrk-file","text":"It is crucial for each .con file to know what .mrk file was used during the recording. We can associate a .con file with an .mrk file in one of 3 different ways, all achieved by right-clicking on the .mrk or .con file in question. Right-click on a .con file and select associate . This will prompt you to select an .mrk file to associate with the .con file. You can do this by right-clicking the .mrk file you wish to associate and then selecting associate . Right-click on an .mrk file and select associate . Same as above but you select the .con file the .mrk is to be associated with. Right-click on an .mrk file and select associate with all . This will associate the selected .mrk file with every .con file in the same directory. Once an .mrk has been associated with a .con file, selecting a .con file will highlight any associated .mrk files in blue in the file treeview on the left hand side. You can use this to confirm that you have associated the correct .mrk file with the correct .con file.","title":"Associating a .mrk file"},{"location":"guide_kit/#exporting-the-data","text":"When all the required information has been entered, the Generate BIDS button will become active. To export you simply press this button once and a popup will appear which gives the current progress of the export process. Once the conversion is done the popup will close and the data will available in the BIDS folder that will be in the file view.","title":"Exporting the data"},{"location":"installation/","text":"Installation Biscuit is completely written in python, allowing it to be run on any computer you can install python on. To allow for the reading of MEG data and conversion a few libraries are required to be installed. There are a few options available depending on the current python install on your system. > Already have Python installed Biscuit is written for python 3.4 and above. If you already have python installed you just need to ensure you have the required dependencies installed. The easiest way to do this is by using pip : pip install numpy scipy matplotlib pandas mne Pygments ( Pygments is used for syntax highlighting. If you do not want this you can ignore this library, however all the other libraries are required for BIDS conversion). On linux you may also require python3-pil.imagetk and python3-tk for the GUI to function. > Don't have Python installed If you do not have a current Python install on your system, it is recommended that you install the Anaconda Python distribution. You can also follow the steps to install MNE-Python . Installing and running Biscuit The most recent version of Biscuit can be found here . Extract the files from the .zip to whatever directory you choose. Depending on your operating system and comfort with python there are a number of ways to start Biscuit. Windows Double-clicking on the GUI.py file will run Biscuit. A python console will appear also which can be ignored. MacOS Double-clicking on the run-mac.command will run Biscuit. This script changes the current working directory to the current directory then calls the python script. It is the same as running python GUI.py from terminal while in the Biscuit folder. Linux Double-clicking GUI.py may also work but this is pretty untested right now. Run GUI.py however you know best.","title":"Installation"},{"location":"installation/#installation","text":"Biscuit is completely written in python, allowing it to be run on any computer you can install python on. To allow for the reading of MEG data and conversion a few libraries are required to be installed. There are a few options available depending on the current python install on your system.","title":"Installation"},{"location":"installation/#already-have-python-installed","text":"Biscuit is written for python 3.4 and above. If you already have python installed you just need to ensure you have the required dependencies installed. The easiest way to do this is by using pip : pip install numpy scipy matplotlib pandas mne Pygments ( Pygments is used for syntax highlighting. If you do not want this you can ignore this library, however all the other libraries are required for BIDS conversion). On linux you may also require python3-pil.imagetk and python3-tk for the GUI to function.","title":"&gt; Already have Python installed"},{"location":"installation/#dont-have-python-installed","text":"If you do not have a current Python install on your system, it is recommended that you install the Anaconda Python distribution. You can also follow the steps to install MNE-Python .","title":"&gt; Don't have Python installed"},{"location":"installation/#installing-and-running-biscuit","text":"The most recent version of Biscuit can be found here . Extract the files from the .zip to whatever directory you choose. Depending on your operating system and comfort with python there are a number of ways to start Biscuit.","title":"Installing and running Biscuit"},{"location":"installation/#windows","text":"Double-clicking on the GUI.py file will run Biscuit. A python console will appear also which can be ignored.","title":"Windows"},{"location":"installation/#macos","text":"Double-clicking on the run-mac.command will run Biscuit. This script changes the current working directory to the current directory then calls the python script. It is the same as running python GUI.py from terminal while in the Biscuit folder.","title":"MacOS"},{"location":"installation/#linux","text":"Double-clicking GUI.py may also work but this is pretty untested right now. Run GUI.py however you know best.","title":"Linux"}]}